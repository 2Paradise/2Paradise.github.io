{"version":3,"sources":["webpack:///./src/components/post-list/PostTagListComp.tsx","webpack:///./src/utils/convertText.ts","webpack:///./src/components/common/PagingComp.tsx","webpack:///./src/components/post-list/PostListComp.tsx","webpack:///./src/templates/post-list-template.tsx","webpack:///./src/hook/use-tag-list.ts","webpack:///./src/components/tag/TagListComp.tsx"],"names":["PostTagListComp","tags","TagBox","map","tag","url","to","key","styled","div","TagName","PagingComp","listInfo","curPage","totalPageCount","count","last","Math","ceil","first","next","prev","listEl","i","push","page","PagingWrap","className","PostListComp","postData","listTitle","value","result","toLocaleLowerCase","JAVASCRIPT","REACT","DOCKER","GRAPHQL","converText","ContentWrap","PostListWrap","color","COMMON_COLOR","edge","node","frontmatter","title","date","desc","slug","fields","TagListComp","props","PostListTemplate","React","memo","data","paramString","location","search","substring","searchParams","URLSearchParams","edges","allMarkdownRemark","_tag","_page","has","get","filter","includes","Number","postCount","length","CONTENT_PER_PAGE","posts","slice","isWide","displayName","pageQuery","useTagList","useStaticQuery","inx","array","forEach","tagsInfo","Object","keys","TagListWrap","idx"],"mappings":"kjBA0BeA,IAjBgC,SAAC,GAAW,IAAVC,EAAU,EAAVA,KAE7C,OACI,kBAACC,EAAD,KACKD,GAAQ,kBAAC,IAAD,MACRA,GAAQA,EAAKE,KAAI,SAAAC,GAChB,IAAMC,EAAM,aAAeD,EAC3B,OACE,kBAAC,OAAD,CAAME,GAAID,EAAKE,IAAKH,GACjBA,QAUnB,IAAMF,EAASM,IAAOC,IAAV,M,yFC5BAC,E,2FAAAA,K,wBAAAA,E,cAAAA,E,gBAAAA,E,mBAAAA,M,KAOL,I,qWCUP,IAoCeC,EApCI,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,SAAUR,EAAqB,EAArBA,IACrBS,EAAkCD,EAAlCC,QAAgBC,GAAkBF,EAAzBG,MAAyBH,EAAlBE,gBAInBE,EAHqB,EACAC,KAAKC,KAAKL,EADV,GAItBG,EAAOF,IAAgBE,EAAOF,GAQjC,IAPA,IAAIK,EAAeH,EAAO,EAEtBI,EAAcJ,EAAO,EACrBK,GAFJF,EAAQA,EAAQ,EAAI,EAAIA,GAEC,EAEnBG,EAA6B,GAE3BC,EAAIJ,EAAOI,GAAKP,EAAOO,IAC7BD,EAAOE,KAAK,CACVnB,IAAG,cAAiBD,EAAjB,SAA6BmB,EAChCE,KAAOF,IAIX,OACI,kBAACG,EAAD,KACE,4BACa,IAAVP,GAAe,wBAAIZ,IAAKc,GAAM,kBAAC,OAAD,CAAMf,GAAE,cAAgBF,EAAhB,SAA4BiB,GAAQ,kBAAC,IAAD,QAChE,IAAVF,GAAgB,4BAAI,kBAAC,OAAD,CAAMb,GAAE,cAAgBF,EAAhB,WAAR,MACV,IAAVe,GAAgB,qCAChBG,EAAOnB,KAAI,gBAAGE,EAAH,EAAGA,IAAKoB,EAAR,EAAQA,KAAR,OAAmB,wBAAIlB,IAAKkB,EAAME,UAAWF,IAASZ,EAAU,SAAW,IAAI,kBAAC,OAAD,CAAMP,GAAID,GAAOoB,OAC3GT,IAASF,GAAkB,qCAC3BE,IAASF,GAAkB,4BAAI,kBAAC,OAAD,CAAMR,GAAE,cAAgBF,EAAhB,SAA4BU,GAAmBA,IACtFE,IAASF,GAAkB,wBAAIP,IAAKa,GAAM,kBAAC,OAAD,CAAMd,GAAE,cAAgBF,EAAhB,SAA4BgB,GAAQ,kBAAC,IAAD,WAQ7FM,EAAalB,IAAOC,IAAV,K,u2CCvChB,IAiCemB,EAjC+B,SAAC,GAAmC,IAAlCC,EAAkC,EAAlCA,SAAUjB,EAAwB,EAAxBA,SAAwB,IAAdR,WAAc,MAAR,GAAQ,EAE1E0B,EFXkB,SAACC,GAEzB,IAAIA,EAAO,OAAOA,EAElB,IAAIC,EAAiB,GAErB,OAAQD,EAAME,qBACZ,IAAK,aACHD,EAAStB,EAAQwB,WACjB,MACF,IAAK,QACHF,EAAStB,EAAQyB,MACjB,MACF,IAAK,SACHH,EAAStB,EAAQ0B,OACjB,MACF,IAAK,UACHJ,EAAStB,EAAQ2B,QACjB,MACF,QACEL,EAASD,EAIb,OAAOC,EEbWM,CAAWlC,GAE7B,OACE,kBAACmC,EAAD,KACE,kBAACC,EAAD,CAAcC,MAAOC,KACnB,yBAAKf,UAAU,YAAYG,GAC3B,yBAAKH,UAAU,aAAaf,EAASG,MAArC,SACA,wBAAIY,UAAU,eACXE,EAAS1B,KAAI,SAACwC,GAAe,MACKA,EAAKC,KAAKC,YAApCC,EADqB,EACrBA,MAAO1C,EADc,EACdA,IAAK2C,EADS,EACTA,KAAMC,EADG,EACHA,KAClBC,EAAQN,EAAKC,KAAKM,OAAlBD,KAEP,OACE,wBAAI1C,IAAKuC,GACP,yBAAKnB,UAAU,aACb,kBAAC,OAAD,CAAMrB,GAAI2C,GAAOH,GACjB,uBAAGnB,UAAU,YAAYoB,GACzB,uBAAGpB,UAAU,YAAYqB,IAE3B,kBAAChD,EAAA,EAAD,CAAiBC,KAAMG,SAK/B,kBAAC,EAAD,CAAYQ,SAAUA,EAAUR,IAAKA,KAEvC,kBAAC+C,EAAA,EAAD,QAOAZ,EAAc/B,IAAOC,IAAV,KAKX+B,EAAehC,IAAOC,IAAV,KAee,SAAA2C,GAAK,OAAIA,EAAMX,SA2CnC,SAAAW,GAAK,OAAIA,EAAMX,SC3GtBY,EAA2DC,IAAMC,MAAK,YAAwB,IAArBC,EAAqB,EAArBA,KAGvEC,EAH4F,EAAfC,SAE3EC,OAC2BC,UAAU,GACvCC,EAAgC,IAAIC,gBAAgBL,GAEtDM,EAAeP,EAAKQ,kBAAkBD,MACtCE,EAAsB,MACtBC,EAAgB,EAEhBL,EAAaM,IAAI,SACnBF,EAAOJ,EAAaO,IAAI,OAGxBL,EAAQA,EAAMM,QAAO,qBAAGzB,KAAQC,YAAezC,IAAmBkE,SAASL,OAGzEJ,EAAaM,IAAI,UACnBD,EAAQK,OAAOV,EAAaO,IAAI,UAGlC,IAAMI,EAAoBT,EAAMU,OAG1B7D,EAA6B,CACjCC,QAASqD,EACTnD,MAAOyD,EACP1D,eAL6B0D,EAAavD,KAAKC,KAAKsD,EAAYE,KAAqB,GAQjFC,EAAQZ,EAAMa,OAAOV,EAAQ,GAAKQ,IAAkBR,EAAQQ,KAElE,OACE,kBAAC,IAAD,CAAQG,QAAQ,GACd,kBAAC,EAAD,CAAchD,SAAU8C,EAAO/D,SAAUA,EAAUR,IAAK6D,QAM9DZ,EAAiByB,YAAc,QAEhBzB,gBAEF0B,EAAY,c,+FCNVC,EA1CI,WAAM,IAqBfjB,EApByCkB,yBAAe,aAAxDjB,kBAoBAD,MAEJ/B,EAAc,GAgBlB,OAdA+B,EAAM5D,KAAI,SAACwC,EAAMuC,EAAKC,GAAU,IACN/E,EAAUuC,EAAKC,KAA/BC,YAAgBzC,IAExBA,WAAKgF,SAAQ,SAAC7E,GACRyB,EAAOzB,GAKTyB,EAAOzB,IAAQ,EAJfyB,EAAOzB,GAAO,QASbyB,G,2rBCpCT,IAAMmB,EAAwBG,IAAMC,MAAK,WAEvC,IAAM8B,EAAgBL,IAChB/E,EAAsBqF,OAAOC,KAAKF,GAExC,OACE,kBAACG,EAAD,CAAa7D,UAAU,UAAUc,MAAOC,KACtC,4BAEIzC,EAAKE,KAAI,SAACC,EAAKqF,GAAN,OACP,wBAAI9D,UAAU,mBAAmBpB,IAAKkF,GACpC,kBAAC,OAAD,CAAMnF,GAAE,aAAeF,GAAQA,YAWvCoF,GAFSrC,MAEK3C,IAAOC,IAAV,KA4BO,SAAA2C,GAAK,OAAIA,EAAMX","file":"component---src-templates-post-list-template-tsx-e61051adb7548736308e.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport {AiFillTags} from 'react-icons/ai'\n\ntype TagListType = {\n  tags : string[] | null | undefined\n}\n\nconst PostTagListComp: React.FC<TagListType> = ({tags}) => {\n\n    return (\n        <TagBox>\n            {tags && <AiFillTags/>}\n            {tags && tags.map(tag => {\n              const url = \"/post?tag=\" + tag;\n              return (\n                <Link to={url} key={tag}>\n                  {tag}\n                </Link>\n              );\n            })}\n        </TagBox>\n    );\n}\n\nexport default PostTagListComp;\n\nconst TagBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: left;\n    border-top:1px solid #d4d4d5;\n    padding:20px;\n    \n    a {\n      color:black;\n      font-size:0.7rem;\n      font-weight: bold;\n      padding: 0 7px;\n      margin:0 5px;\n      border-radius: 5px;\n      background-color: #d4d4d5;\n    }\n`;\n","export enum TagName {\n  JAVASCRIPT = 'JavaScript',\n  REACT = 'React',\n  DOCKER = 'Docker',\n  GRAPHQL = 'GraphQL',\n}\n\nexport const converText = (value: string | null | undefined) => {\n\n  if(!value) return value;\n\n  let result: string = \"\";\n\n  switch (value.toLocaleLowerCase()) {\n    case \"javascript\":\n      result = TagName.JAVASCRIPT;\n      break;\n    case \"react\":\n      result = TagName.REACT;\n      break;\n    case \"docker\":\n      result = TagName.DOCKER;\n      break;\n    case \"graphql\":\n      result = TagName.GRAPHQL;\n      break;\n    default:\n      result = value;\n      break;\n  }\n\n  return result;\n};\n","import React from 'react';\nimport styled from \"styled-components\"\nimport {CONTENT_PER_PAGE} from \"../../constants\";\nimport { Link } from \"gatsby\"\nimport {GrFormPrevious, GrFormNext} from 'react-icons/gr';\nimport { PostListInfoType } from \"../../types\"\n\ntype PagingType = {\n  listInfo: PostListInfoType\n  tag: string |  null\n}\n\ntype PageInfoType = {\n  url: string\n  page?: number\n}\n\nconst PagingComp = ({ listInfo, tag }:PagingType) => {\n    const {curPage, count, totalPageCount} = listInfo;\n    const pageCount:number = 5;\n    const pageGroup:number = Math.ceil(curPage/pageCount);\n\n    let last:number = pageGroup * pageCount;\n    if(last > totalPageCount) last = totalPageCount;\n    let first:number = last - (pageCount - 1) ;\n    first = first < 1 ? 1 : first;\n    let next:number = last + 1;\n    let prev:number = first -1;\n\n    const listEl:Array<PageInfoType> = [];\n\n    for(let i = first; i <= last ; i++){\n      listEl.push({\n        url : `/post/?tag=${tag}&page=${i}`,\n        page : i\n      });\n    }\n\n    return (\n        <PagingWrap>\n          <ul>\n            {first !== 1 && <li key={prev}><Link to={`/post/?tag=${tag}&page=${prev}`}><GrFormPrevious/></Link></li>}\n            {first !== 1 && (<li><Link to={`/post/?tag=${tag}&page=1`}>1</Link></li>)}\n            {first !== 1 && (<li>. . .</li>)}\n            {listEl.map(({ url, page }) => <li key={page} className={page === curPage ? \"active\" : \"\"}><Link to={url} >{page}</Link></li>)}\n            {last !== totalPageCount && <li>. . .</li>}\n            {last !== totalPageCount && <li><Link to={`/post/?tag=${tag}&page=${totalPageCount}`}>{totalPageCount}</Link></li>}\n            {last !== totalPageCount && <li key={next}><Link to={`/post/?tag=${tag}&page=${next}`}><GrFormNext/></Link></li>}\n          </ul>\n        </PagingWrap>\n    );\n};\n\nexport default PagingComp;\n\nconst PagingWrap = styled.div`\n  width: 100%;\n\n  ul {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  li + li {\n    padding-left: 20px;\n  }\n\n  li a {\n    color: black;\n  }\n  \n  li.active a {\n    font-size: 1.4rem;\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport { converText } from \"../../utils/convertText\";\nimport PostTagListComp from \"./PostTagListComp\";\nimport { Edge, Edges, PostListInfoType } from \"../../types\";\nimport PagingComp from \"../common/PagingComp\"\nimport TagListComp from \"../tag/TagListComp\"\nimport { COMMON_COLOR } from \"../../constants\"\n\ntype PostListProps = {\n  postData: Edges\n  listInfo: PostListInfoType\n  tag? : string | null\n};\n\nconst PostListComp: React.FC<PostListProps> = ({postData, listInfo, tag = \"\"}) => {\n\n  const listTitle = converText(tag);\n\n  return (\n    <ContentWrap>\n      <PostListWrap color={COMMON_COLOR}>\n        <div className=\"tagTitle\">{listTitle}</div>\n        <div className=\"postCount\">{listInfo.count} post</div>\n        <ul className=\"postlist-ul\">\n          {postData.map((edge: Edge) => {\n            const {title, tag, date, desc} = edge.node.frontmatter;\n            const {slug} = edge.node.fields;\n\n            return (\n              <li key={title}>\n                <div className=\"box-title\">\n                  <Link to={slug}>{title}</Link>\n                  <p className=\"box-date\">{date}</p>\n                  <p className=\"box-desc\">{desc}</p>\n                </div>\n                <PostTagListComp tags={tag}/>\n              </li>\n            );\n          })}\n        </ul>\n        <PagingComp listInfo={listInfo} tag={tag}/>\n      </PostListWrap>\n      <TagListComp/>\n    </ContentWrap>\n  );\n};\n\nexport default PostListComp;\n\nconst ContentWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PostListWrap = styled.div`\n  width: 840px;\n  padding:60px 0;\n  \n  .tagTitle {\n    padding: 10px 10px;\n    font-weight: bold;\n    font-size:1.3rem;\n  }\n  \n  .postCount {\n    padding: 0 10px 10px 10px;\n    font-size:1rem;\n    font-weight: bold;\n    color:#d4d4d5;\n    border-bottom: 0.5px solid ${props => props.color};\n  }\n  \n  ul.postlist-ul {\n    margin:30px 0;\n  }\n  \n  ul.postlist-ul li{\n    border: none;\n    border-radius: 5px;\n    box-shadow: 0 1px 10px 0 #d4d4d5, 0 0 0 1px #d4d4d5;\n    transition: box-shadow .1s ease,transform .1s ease;\n    cursor: pointer;\n  }\n  \n  ul.postlist-ul li + ul.postlist-ul li {\n    margin-top: 20px;\n  }\n  \n  ul.postlist-ul li .box-title {\n    padding:20px;\n  }\n\n  ul.postlist-ul li .box-title .box-date{\n    font-size:0.8rem;\n    margin-bottom:15px !important;\n  }\n  ul.postlist-ul li .box-title .box-desc{\n    font-size: 0.9rem;\n    word-wrap: break-word;\n    height: 50px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n  \n  ul.postlist-ul li .box-title a{\n    font-size:1.3rem;\n    text-decoration: none;\n    color: black;\n    font-weight: bold;\n  }\n  \n  ul.postlist-ul li .box-title a:hover {\n    color: ${props => props.color};\n  }\n`;\n","import React from 'react';\nimport Layout from '../components/layout';\nimport { graphql, PageProps } from \"gatsby\"\nimport {CONTENT_PER_PAGE} from \"../constants\";\nimport { AllMarkdownRemark, Edges, PostListInfoType } from \"../types\"\nimport PostListComp from \"../components/post-list/PostListComp\"\n\nconst PostListTemplate: React.FC<PageProps<AllMarkdownRemark>> = React.memo(({ data, location }) => {\n\n  const { search } = location;\n  const paramString: string = search.substring(1);\n  const searchParams: URLSearchParams = new URLSearchParams(paramString);\n\n  let edges: Edges = data.allMarkdownRemark.edges;\n  let _tag: string | null = \"ALL\";\n  let _page: number = 1;\n\n  if (searchParams.has(\"tag\")) {\n    _tag = searchParams.get(\"tag\");\n\n    // @ts-ignore\n    edges = edges.filter(({ node: { frontmatter: { tag } } }) => (tag.includes(_tag)));\n  }\n\n  if (searchParams.has(\"page\")) {\n    _page = Number(searchParams.get(\"page\"))\n  }\n\n  const postCount: number = edges.length\n  const totalPageCount: number = postCount ? (Math.ceil(postCount / CONTENT_PER_PAGE)) : 1\n\n  const listInfo: PostListInfoType = {\n    curPage: _page,\n    count: postCount,\n    totalPageCount: totalPageCount\n  }\n  // let posts = edges;\n  const posts = edges.slice((_page - 1) * CONTENT_PER_PAGE, _page * CONTENT_PER_PAGE)\n\n  return (\n    <Layout isWide={false}>\n      <PostListComp postData={posts} listInfo={listInfo} tag={_tag}/>\n    </Layout>\n  )\n})\n\n\nPostListTemplate.displayName = 'posts';\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`\n  query PostListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            type\n            title\n            tag\n            date\n            desc\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, useStaticQuery } from \"gatsby\"\nimport { AllMarkdownRemark} from \"../types\"\n\nconst useTagList = () => {\n  const { allMarkdownRemark }: AllMarkdownRemark = useStaticQuery(\n    graphql`\n      query TagQuery {\n        allMarkdownRemark (\n          filter: {\n            frontmatter: { hide: { eq: false } }\n          }\n        ) {\n          edges {\n            node {\n              frontmatter {\n                tag\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const { edges } = allMarkdownRemark;\n\n  let result: any = {};\n\n  edges.map((edge, inx, array) => {\n    const { frontmatter : { tag } } = edge.node;\n\n    tag?.forEach((key) => {\n      if(!result[key]) {\n        result[key] = 1;\n      }\n      else\n      {\n        result[key] += 1;\n      }\n    });\n  });\n\n  return result;\n};\n\nexport default useTagList;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport useTagList from \"../../hook/use-tag-list\"\nimport { Link } from \"gatsby\"\nimport { COMMON_COLOR } from \"../../constants\"\n\nconst TagListComp: React.FC = React.memo(() => {\n\n  const tagsInfo: any = useTagList();\n  const tags: Array<string> = Object.keys(tagsInfo);\n\n  return (\n    <TagListWrap className=\"taglist\" color={COMMON_COLOR}>\n      <ul>\n        {\n          tags.map((tag, idx) => (\n            <li className=\"taglist___tagbox\" key={idx}>\n              <Link to={`/post?tag=${tag}`}>{tag}</Link>\n            </li>\n          ))\n        }\n      </ul>\n    </TagListWrap>\n  );\n});\n\nexport default TagListComp;\n\nconst TagListWrap = styled.div`\n  position: relative;\n  margin-top: 116px;\n  padding-top:20px;\n  width: 350px;\n  \n  &::before {\n    content: \"Tag Box\";\n    position: absolute;\n    font-size: 1.5rem;\n    font-weight: bold;\n    top: -40px;\n    z-index: 2;\n  }\n  \n  & ul {\n    display: flex;\n    justify-content: left;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  \n  & ul li {\n    padding: 0.2em 0.6em;\n    border-radius: 0.4em;\n    font-size: 0.8rem;\n    letter-spacing: 0.1em;\n    color: white;\n    background-color: ${props => props.color};\n  }\n  .taglist___tagbox{\n    margin-left: 4px;\n  }\n  \n  & a {\n    color: white;\n  }\n`;\n"],"sourceRoot":""}