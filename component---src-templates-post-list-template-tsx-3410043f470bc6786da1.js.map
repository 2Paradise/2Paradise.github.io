{"version":3,"sources":["webpack:///./src/components/post-list/PostTagListComp.tsx","webpack:///./src/utils/convertText.ts","webpack:///./src/components/common/PagingComp.tsx","webpack:///./src/components/post-list/PostListComp.tsx","webpack:///./src/templates/post-list-template.tsx","webpack:///./src/hook/use-tag-list.ts","webpack:///./src/components/tag/TagListComp.tsx"],"names":["PostTagListComp","_ref","tags","React","createElement","TagBox","AiFillTags","map","tag","url","Link","to","key","styled","div","TagName","PagingComp","listInfo","curPage","count","totalPageCount","last","Math","ceil","first","next","prev","listEl","i","push","page","PagingWrap","GrFormPrevious","_ref2","className","GrFormNext","PostListComp","postData","listTitle","value","result","toLocaleLowerCase","JAVASCRIPT","REACT","DOCKER","GRAPHQL","converText","ContentWrap","PostListWrap","color","COMMON_COLOR","edge","title","date","desc","node","frontmatter","slug","fields","TagListComp","props","PostListTemplate","memo","data","location","search","paramString","substring","searchParams","URLSearchParams","edges","allMarkdownRemark","_tag","_page","has","get","filter","includes","Number","postCount","length","CONTENT_PER_PAGE","posts","slice","Layout","isWide","displayName","pageQuery","useTagList","useStaticQuery","inx","array","forEach","tagsInfo","Object","keys","TagListWrap","idx"],"mappings":"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","file":"component---src-templates-post-list-template-tsx-3410043f470bc6786da1.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport {AiFillTags} from 'react-icons/ai'\n\ntype TagListType = {\n  tags : string[] | null | undefined\n}\n\nconst PostTagListComp: React.FC<TagListType> = ({tags}) => {\n\n    return (\n        <TagBox>\n            {tags && <AiFillTags/>}\n            {tags && tags.map(tag => {\n              const url = \"/post?tag=\" + tag;\n              return (\n                <Link to={url} key={tag}>\n                  {tag}\n                </Link>\n              );\n            })}\n        </TagBox>\n    );\n}\n\nexport default PostTagListComp;\n\nconst TagBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: left;\n    border-top:1px solid #d4d4d5;\n    padding:20px;\n    \n    a {\n      color:black;\n      font-size:0.7rem;\n      font-weight: bold;\n      padding: 0 7px;\n      margin:0 5px;\n      border-radius: 5px;\n      background-color: #d4d4d5;\n    }\n`;\n","export enum TagName {\n  JAVASCRIPT = 'JavaScript',\n  REACT = 'React',\n  DOCKER = 'Docker',\n  GRAPHQL = 'GraphQL',\n}\n\nexport const converText = (value: string | null | undefined) => {\n\n  if(!value) return value;\n\n  let result: string = \"\";\n\n  switch (value.toLocaleLowerCase()) {\n    case \"javascript\":\n      result = TagName.JAVASCRIPT;\n      break;\n    case \"react\":\n      result = TagName.REACT;\n      break;\n    case \"docker\":\n      result = TagName.DOCKER;\n      break;\n    case \"graphql\":\n      result = TagName.GRAPHQL;\n      break;\n    default:\n      result = value;\n      break;\n  }\n\n  return result;\n};\n","import React from 'react';\nimport styled from \"styled-components\"\nimport {CONTENT_PER_PAGE} from \"../../constants\";\nimport { Link } from \"gatsby\"\nimport {GrFormPrevious, GrFormNext} from 'react-icons/gr';\nimport { PostListInfoType } from \"../../types\"\n\ntype PagingType = {\n  listInfo: PostListInfoType\n  tag: string |  null\n}\n\ntype PageInfoType = {\n  url: string\n  page?: number\n}\n\nconst PagingComp = ({ listInfo, tag }:PagingType) => {\n    const {curPage, count, totalPageCount} = listInfo;\n    const pageCount:number = 5;\n    const pageGroup:number = Math.ceil(curPage/pageCount);\n\n    let last:number = pageGroup * pageCount;\n    if(last > totalPageCount) last = totalPageCount;\n    let first:number = last - (pageCount - 1) ;\n    first = first < 1 ? 1 : first;\n    let next:number = last + 1;\n    let prev:number = first -1;\n\n    const listEl:Array<PageInfoType> = [];\n\n    for(let i = first; i <= last ; i++){\n      listEl.push({\n        url : `/post/?tag=${tag}&page=${i}`,\n        page : i\n      });\n    }\n\n    return (\n        <PagingWrap>\n          <ul>\n            {first !== 1 && <li key={prev}><Link to={`/post/?tag=${tag}&page=${prev}`}><GrFormPrevious/></Link></li>}\n            {first !== 1 && (<li><Link to={`/post/?tag=${tag}&page=1`}>1</Link></li>)}\n            {first !== 1 && (<li>. . .</li>)}\n            {listEl.map(({ url, page }) => <li key={page} className={page === curPage ? \"active\" : \"\"}><Link to={url} >{page}</Link></li>)}\n            {last !== totalPageCount && <li>. . .</li>}\n            {last !== totalPageCount && <li><Link to={`/post/?tag=${tag}&page=${totalPageCount}`}>{totalPageCount}</Link></li>}\n            {last !== totalPageCount && <li key={next}><Link to={`/post/?tag=${tag}&page=${next}`}><GrFormNext/></Link></li>}\n          </ul>\n        </PagingWrap>\n    );\n};\n\nexport default PagingComp;\n\nconst PagingWrap = styled.div`\n  width: 100%;\n\n  ul {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  li + li {\n    padding-left: 20px;\n  }\n\n  li a {\n    color: black;\n  }\n  \n  li.active a {\n    font-size: 1.4rem;\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport { converText } from \"../../utils/convertText\";\nimport PostTagListComp from \"./PostTagListComp\";\nimport { Edge, Edges, PostListInfoType } from \"../../types\";\nimport PagingComp from \"../common/PagingComp\"\nimport TagListComp from \"../tag/TagListComp\"\nimport { COMMON_COLOR } from \"../../constants\"\n\ntype PostListProps = {\n  postData: Edges\n  listInfo: PostListInfoType\n  tag? : string | null\n};\n\nconst PostListComp: React.FC<PostListProps> = ({postData, listInfo, tag = \"\"}) => {\n\n  const listTitle = converText(tag);\n\n  return (\n    <ContentWrap>\n      <PostListWrap color={COMMON_COLOR}>\n        <div className=\"tagTitle\">{listTitle}</div>\n        <div className=\"postCount\">{listInfo.count} post</div>\n        <ul className=\"postlist-ul\">\n          {postData.map((edge: Edge) => {\n            const {title, tag, date, desc} = edge.node.frontmatter;\n            const {slug} = edge.node.fields;\n\n            return (\n              <li key={title}>\n                <div className=\"box-title\">\n                  <Link to={slug}>{title}</Link>\n                  <p className=\"box-date\">{date}</p>\n                  <p className=\"box-desc\">{desc}</p>\n                </div>\n                <PostTagListComp tags={tag}/>\n              </li>\n            );\n          })}\n        </ul>\n        <PagingComp listInfo={listInfo} tag={tag}/>\n      </PostListWrap>\n      <TagListComp/>\n    </ContentWrap>\n  );\n};\n\nexport default PostListComp;\n\nconst ContentWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PostListWrap = styled.div`\n  width: 840px;\n  padding:60px 0;\n  \n  .tagTitle {\n    padding: 10px 10px;\n    font-weight: bold;\n    font-size:1.3rem;\n  }\n  \n  .postCount {\n    padding: 0 10px 10px 10px;\n    font-size:1rem;\n    font-weight: bold;\n    color:#d4d4d5;\n    border-bottom: 0.5px solid ${props => props.color};\n  }\n  \n  ul.postlist-ul {\n    margin:30px 0;\n  }\n  \n  ul.postlist-ul li{\n    border: none;\n    border-radius: 5px;\n    box-shadow: 0 1px 10px 0 #d4d4d5, 0 0 0 1px #d4d4d5;\n    transition: box-shadow .1s ease,transform .1s ease;\n    cursor: pointer;\n  }\n  \n  ul.postlist-ul li + ul.postlist-ul li {\n    margin-top: 20px;\n  }\n  \n  ul.postlist-ul li .box-title {\n    padding:20px;\n  }\n\n  ul.postlist-ul li .box-title .box-date{\n    font-size:0.8rem;\n    margin-bottom:15px !important;\n  }\n  ul.postlist-ul li .box-title .box-desc{\n    font-size: 0.9rem;\n    word-wrap: break-word;\n    height: 50px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n  \n  ul.postlist-ul li .box-title a{\n    font-size:1.3rem;\n    text-decoration: none;\n    color: black;\n    font-weight: bold;\n  }\n  \n  ul.postlist-ul li .box-title a:hover {\n    color: ${props => props.color};\n  }\n`;\n","import React from 'react';\nimport Layout from '../components/layout';\nimport { graphql, PageProps } from \"gatsby\"\nimport {CONTENT_PER_PAGE} from \"../constants\";\nimport { AllMarkdownRemark, Edges, PostListInfoType } from \"../types\"\nimport PostListComp from \"../components/post-list/PostListComp\"\n\nconst PostListTemplate: React.FC<PageProps<AllMarkdownRemark>> = React.memo(({ data, location }) => {\n\n  const { search } = location;\n  const paramString: string = search.substring(1);\n  const searchParams: URLSearchParams = new URLSearchParams(paramString);\n\n  let edges: Edges = data.allMarkdownRemark.edges;\n  let _tag: string | null = \"ALL\";\n  let _page: number = 1;\n\n  if (searchParams.has(\"tag\")) {\n    _tag = searchParams.get(\"tag\");\n\n    // @ts-ignore\n    edges = edges.filter(({ node: { frontmatter: { tag } } }) => (tag.includes(_tag)));\n  }\n\n  if (searchParams.has(\"page\")) {\n    _page = Number(searchParams.get(\"page\"))\n  }\n\n  const postCount: number = edges.length\n  const totalPageCount: number = postCount ? (Math.ceil(postCount / CONTENT_PER_PAGE)) : 1\n\n  const listInfo: PostListInfoType = {\n    curPage: _page,\n    count: postCount,\n    totalPageCount: totalPageCount\n  }\n  // let posts = edges;\n  const posts = edges.slice((_page - 1) * CONTENT_PER_PAGE, _page * CONTENT_PER_PAGE)\n\n  return (\n    <Layout isWide={false}>\n      <PostListComp postData={posts} listInfo={listInfo} tag={_tag}/>\n    </Layout>\n  )\n})\n\n\nPostListTemplate.displayName = 'posts';\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`\n  query PostListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            type\n            title\n            tag\n            date\n            desc\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, useStaticQuery } from \"gatsby\"\nimport { AllMarkdownRemark} from \"../types\"\n\nconst useTagList = () => {\n  const { allMarkdownRemark }: AllMarkdownRemark = useStaticQuery(\n    graphql`\n      query TagQuery {\n        allMarkdownRemark (\n          filter: {\n            frontmatter: { hide: { eq: false } }\n          }\n        ) {\n          edges {\n            node {\n              frontmatter {\n                tag\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const { edges } = allMarkdownRemark;\n\n  let result: any = {};\n\n  edges.map((edge, inx, array) => {\n    const { frontmatter : { tag } } = edge.node;\n\n    tag?.forEach((key) => {\n      if(!result[key]) {\n        result[key] = 1;\n      }\n      else\n      {\n        result[key] += 1;\n      }\n    });\n  });\n\n  return result;\n};\n\nexport default useTagList;\n","import React from 'react';\nimport styled from \"styled-components\";\nimport useTagList from \"../../hook/use-tag-list\"\nimport { Link } from \"gatsby\"\nimport { COMMON_COLOR } from \"../../constants\"\n\nconst TagListComp: React.FC = React.memo(() => {\n\n  const tagsInfo: any = useTagList();\n  const tags: Array<string> = Object.keys(tagsInfo);\n\n  return (\n    <TagListWrap className=\"taglist\" color={COMMON_COLOR}>\n      <ul>\n        {\n          tags.map((tag, idx) => (\n            <li className=\"taglist___tagbox\" key={idx}>\n              <Link to={`/post?tag=${tag}`}>{tag}</Link>\n            </li>\n          ))\n        }\n      </ul>\n    </TagListWrap>\n  );\n});\n\nexport default TagListComp;\n\nconst TagListWrap = styled.div`\n  position: relative;\n  margin-top: 116px;\n  padding-top:20px;\n  width: 350px;\n  \n  &::before {\n    content: \"Tag Box\";\n    position: absolute;\n    font-size: 1.5rem;\n    font-weight: bold;\n    top: -40px;\n    z-index: 2;\n  }\n  \n  & ul {\n    display: flex;\n    justify-content: left;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  \n  & ul li {\n    padding: 0.2em 0.6em;\n    border-radius: 0.4em;\n    font-size: 0.8rem;\n    letter-spacing: 0.1em;\n    color: white;\n    background-color: ${props => props.color};\n  }\n  .taglist___tagbox{\n    margin-left: 4px;\n  }\n  \n  & a {\n    color: white;\n  }\n`;\n"],"sourceRoot":""}