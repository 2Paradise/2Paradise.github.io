{"version":3,"sources":["webpack:///./src/utils/convertText.ts","webpack:///./src/components/common/PagingComp.tsx","webpack:///./src/components/PostList/PostListComp.tsx","webpack:///./src/templates/PostListTemplate.tsx","webpack:///./src/constants/index.ts","webpack:///./src/components/PostList/PostTagListComp.tsx"],"names":["TagName","PagingComp","listInfo","tag","curPage","totalPageCount","count","last","Math","ceil","first","next","prev","listEl","i","push","url","page","PagingWrap","key","to","map","className","styled","div","PostList","postData","listTitle","value","result","toLocaleLowerCase","JAVASCRIPT","REACT","DOCKER","GRAPHQL","converText","ContentWrap","PostListWrap","edges","node","frontmatter","postUrl","title","date","desc","PostTagListComp","tags","PostListTemplate","join","React","memo","props","paramString","location","search","substring","searchParams","URLSearchParams","data","posts","_tag","_page","has","get","filter","includes","Number","postCount","length","slice","PostListComp","displayName","pageQuery","TagBox"],"mappings":"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","file":"component---src-templates-post-list-template-tsx-6934c5dc96e728ffb8c3.js","sourcesContent":["export enum TagName {\n  JAVASCRIPT = 'JavaScript',\n  REACT = 'React',\n  DOCKER = 'Docker',\n  GRAPHQL = 'GraphQL'\n}\n\n\nexport const converText = (value: string) => {\n\n  let result: string = \"\";\n\n  switch (value.toLocaleLowerCase()) {\n    case \"javascript\":\n      result = TagName.JAVASCRIPT;\n      break;\n    case \"react\":\n      result = TagName.REACT;\n      break;\n    case \"docker\":\n      result = TagName.DOCKER;\n      break;\n    case \"graphql\":\n      result = TagName.GRAPHQL;\n      break;\n    default:\n      result = value;\n      break;\n  }\n\n  return result;\n};\n","import React from 'react';\nimport styled from \"styled-components\"\nimport { PostListInfoType } from \"../../interface\";\nimport {CONTENT_PER_PAGE} from \"../../constants\";\nimport { Link } from \"gatsby\"\nimport {GrFormPrevious, GrFormNext} from 'react-icons/gr';\n\ntype PagingType = {\n  listInfo: PostListInfoType\n  tag: string\n}\n\ntype PageInfoType = {\n  url: string\n  page?: number\n}\n\nconst PagingComp = ({ listInfo, tag }:PagingType) => {\n    const {curPage, count, totalPageCount} = listInfo;\n    const pageCount:number = 5;\n    const pageGroup:number = Math.ceil(curPage/pageCount);\n\n    let last:number = pageGroup * pageCount;\n    if(last > totalPageCount) last = totalPageCount;\n    let first:number = last - (pageCount - 1) ;\n    first = first < 1 ? 1 : first;\n    let next:number = last + 1;\n    let prev:number = first -1;\n\n    const listEl:Array<PageInfoType> = [];\n\n    for(let i = first; i <= last ; i++){\n      listEl.push({\n        url : `/post/?tag=${tag}&page=${i}`,\n        page : i\n      });\n    }\n\n    return (\n        <PagingWrap>\n          <ul>\n            {first !== 1 && <li key={prev}><Link to={`/post/?tag=${tag}&page=${prev}`}><GrFormPrevious/></Link></li>}\n            {first !== 1 && (<li><Link to={`/post/?tag=${tag}&page=1`}>1</Link></li>)}\n            {first !== 1 && (<li>. . .</li>)}\n            {listEl.map(({ url, page }) => <li key={page} className={page === curPage ? \"active\" : \"\"}><Link to={url} >{page}</Link></li>)}\n            {last !== totalPageCount && <li>. . .</li>}\n            {last !== totalPageCount && <li><Link to={`/post/?tag=${tag}&page=${totalPageCount}`}>{totalPageCount}</Link></li>}\n            {last !== totalPageCount && <li key={next}><Link to={`/post/?tag=${tag}&page=${next}`}><GrFormNext/></Link></li>}\n          </ul>\n        </PagingWrap>\n    );\n};\n\nexport default PagingComp;\n\nconst PagingWrap = styled.div`\n  width: 100%;\n\n  ul {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  li + li {\n    padding-left: 20px;\n  }\n\n  li a {\n    color: black;\n  }\n  \n  li.active a {\n    font-size: 1.4rem;\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport { nodeType, PostListInfoType } from \"../../interface\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport { converText } from \"../../utils/convertText\"\nimport PostTagListComp from \"./PostTagListComp\"\nimport PagingComp from \"../common/PagingComp\"\n\ntype PostListProps = {\n  postData: Array<nodeType>\n  listInfo: PostListInfoType\n  tag? : string\n};\n\nconst PostList = ({postData, listInfo, tag}: PostListProps) => {\n\n  const listTitle = converText(tag);\n\n  return (\n    <ContentWrap>\n      <PostListWrap>\n        <div className=\"tagTitle\">{listTitle}</div>\n        <div className=\"postCount\">{listInfo.count} post</div>\n        <ul className=\"postlist-ul\">\n          {postData.map((edges) => {\n            const {postUrl, title, tag, date, desc} = edges.node.frontmatter;\n\n            return (\n              <li key={title}>\n                <div className=\"box-title\">\n                  <Link to={postUrl}>{title}</Link>\n                  <p className=\"box-date\">{date}</p>\n                  <p className=\"box-desc\">{desc}</p>\n                </div>\n                <PostTagListComp tags={tag}/>\n              </li>\n            );\n          })}\n        </ul>\n        <PagingComp listInfo={listInfo} tag={tag}/>\n      </PostListWrap>\n    </ContentWrap>\n  );\n};\n\nexport default PostList;\n\nconst ContentWrap = styled.div`\n  display: flex;\n`;\n\nconst PostListWrap = styled.div`\n  width: 740px;\n  padding:50px 0;\n  \n  .tagTitle {\n    padding: 10px 10px;\n    font-weight: bold;\n    font-size:1.3rem;\n  }\n  \n  .postCount {\n    padding: 0 10px 10px 10px;\n    font-size:1rem;\n    font-weight: bold;\n    color:#d4d4d5;\n    border-bottom: 0.5px solid #3399ff;\n  }\n  \n  ul.postlist-ul {\n    margin:30px 0;\n  }\n  \n  ul.postlist-ul li{\n    border: none;\n    border-radius: 5px;\n    box-shadow: 0 1px 10px 0 #d4d4d5, 0 0 0 1px #d4d4d5;\n    transition: box-shadow .1s ease,transform .1s ease;\n    cursor: pointer;\n  }\n  \n  ul.postlist-ul li + ul.postlist-ul li {\n    margin-top: 20px;\n  }\n  \n  ul.postlist-ul li .box-title {\n    padding:20px;\n  }\n\n  ul.postlist-ul li .box-title .box-date{\n    font-size:0.8rem;\n    margin-bottom:15px !important;\n  }\n  ul.postlist-ul li .box-title .box-desc{\n    font-size: 0.9rem;\n    word-wrap: break-word;\n    height: 50px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n  \n  ul.postlist-ul li .box-title a{\n    font-size:1.3rem;\n    text-decoration: none;\n    color: black;\n    font-weight: bold;\n  }\n  \n  ul.postlist-ul li .box-title a:hover {\n    color: #3399ff;\n  }\n`;\n","import React from 'react';\nimport Layout from '../components/layout';\nimport { nodeType, PostListInfoType, PostPropsType } from \"../interface\"\nimport { graphql } from 'gatsby';\nimport PostListComp from \"../components/PostList/PostListComp\";\nimport {CONTENT_PER_PAGE} from \"../constants\";\n\nconst PostListTemplate: React.FC<PostPropsType> = React.memo(props => {\n  const {search} = props.location;\n  const paramString: string = search.substring(1);\n  const searchParams:URLSearchParams = new URLSearchParams(paramString);\n\n  let edges = props.data.posts.edges;\n  let _tag: string = \"ALL\";\n  let _page: number = 1;\n\n  if(searchParams.has(\"tag\")){\n    _tag = searchParams.get(\"tag\");\n    edges = edges.filter(({ node: {frontmatter: {tag}}}: nodeType) => (tag.includes(_tag)));\n  }\n\n  if(searchParams.has(\"page\")){\n    _page = Number(searchParams.get(\"page\"));\n  }\n\n  const postCount: number = edges.length;\n  const totalPageCount: number = postCount ? (Math.ceil(postCount / CONTENT_PER_PAGE)) : 1;\n\n  const listInfo: PostListInfoType = {\n    curPage : _page,\n    count: postCount,\n    totalPageCount: totalPageCount\n  }\n  // let posts = edges;\n  const posts = edges.slice((_page -1 ) * CONTENT_PER_PAGE, _page * CONTENT_PER_PAGE);\n\n  return (\n    <Layout>\n      <PostListComp postData={posts} listInfo={listInfo} tag={_tag}/>\n    </Layout>\n  );\n});\n\nPostListTemplate.displayName = 'PostListTemplate';\n\nexport default PostListTemplate;\n\nexport const pageQuery = graphql`\n  query PostListQuery {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    posts: allMarkdownRemark (\n      filter: { frontmatter: { hide: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            type\n            title\n            postUrl\n            tag\n            date\n            desc\n          }\n        }\n      }\n    }\n  }\n`;\n","export const CONTENT_PER_PAGE: number = 8;\nexport const PAGE_PER_SCREEN: number = 4;\n\nexport const POST: string = 'post';\nexport const TECH: string = 'tech';\nexport const PORTFOLIO: string = 'portfolio';\nexport const RESUME: string = 'resume';\n\n// Site Information\nexport const NAME: string = '2Paradise Blog';\nexport const TITLE: string = '2Paradise Blog';\nexport const PREFIX: string = '2Paradise | ';\nexport const DESCRIPTION: string = 'I always want to be a respected developer.';\nexport const AUTHOR: string = '2Paradise';\nexport const EMAIL: string = 'robinnwpa@gmail.com';\nexport const KEYWORDS = [\n  'Gatsby',\n  'ReactJS',\n].join(', ');\nexport const SITE_URL: string = 'https://2Paradise.github.io';\nexport const PROFILE: string = 'https://avatars0.githubusercontent.com/u/65708679?s=460&u=6f2003c81185fbe1d98b89816a353f18c09b8dd5&v=4';\n\n// Social\nexport const GITHUB_ID: string = '2Paradise';\nexport const TWITTER_ID: string = '';\nexport const FACEBOOK_ID: string = 'robinnw';\nexport const LINKEDIN_ID: string = '';\n\n// Disqus (Recommend you to use this)\nexport const DISQUS_ID: string = '2Paradise';\n","import React from 'react';\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport {AiFillTags} from 'react-icons/ai'\n\ntype TagListType = {\n  tags : Array<string>\n}\n\nfunction PostTagListComp({tags}:TagListType) {\n    return (\n        <TagBox>\n            {tags && <AiFillTags/>}\n            {tags.map(tag => {\n              const url = \"/post?tag=\" + tag;\n              return (\n                <Link to={url} key={tag}>\n                  {tag}\n                </Link>\n              );\n            })}\n        </TagBox>\n    );\n}\n\nexport default PostTagListComp;\n\nconst TagBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: left;\n    border-top:1px solid #d4d4d5;\n    padding:20px;\n    \n    a {\n      color:black;\n      font-size:0.7rem;\n      font-weight: bold;\n      padding: 0 7px;\n      margin:0 5px;\n      border-radius: 5px;\n      background-color: #d4d4d5;\n    }\n`;\n"],"sourceRoot":""}