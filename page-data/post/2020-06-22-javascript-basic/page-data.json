{"componentChunkName":"component---src-templates-post-template-tsx","path":"/post/2020-06-22-javascript-basic","result":{"data":{"site":{"siteMetadata":{"title":"2Paradise Develop Note","author":"@2Paradise"}},"post":{"html":"<p> ECMAScript5는 2009년 12월에 등장하였다. ECMAScript2019가 나와있는 현재 아직도 많은 프로젝트에서는 ES5로 코딩이 되고 있다. 나 또한 ES6 문법은 생소하지만 이에 대한 학습의 필요성을 느끼고 Front-end 개발자로서 기초를 다진다는 생각으로 접근하려 한다.</p>\n<p> ES6를 사용해야 하는 많은 이유들이 있겠지만 ES6부터 추가된 가장 많이 사용되는 문법으로</p>\n<ul>\n<li>비구조화할당</li>\n<li>객체 초기자</li>\n<li>템플릿 리터럴 문자</li>\n<li>기본매개변수</li>\n<li>Promise - Co - async/await</li>\n</ul>\n<p> 등등 알아가야 할 문법들이 많이 있다. 우선 기본적인 문법들 부터 알아보자.</p>\n<h2>화살표 함수</h2>\n<pre><code class=\"language-javascript\">const add = function(a, b) {\n  return a + b;\n};\n\nconst add1 = (a, b) => {\n  return a + b;\n};\n\nconst add2 = (a, b) => a + b;\n\nconst sum = add(1, 2);\nconst sum1 = add1(1, 2);\nconst sum2 = add2(1, 2);\n\nconsole.log(sum);\nconsole.log(sum1);\nconsole.log(sum2);\n</code></pre>\n<h2>배열 내장함수</h2>\n<ul>\n<li>forEach</li>\n</ul>\n<pre><code class=\"language-javascript\">const superheroes = [\"아이언맨\", \"캡틴아메리카\", \"토르\", \"닥터 스트레인지\"];\n\nconst print = (hero) => console.log(hero);\n\nsuperheroes.forEach(print);\n\n-------------CONSOLE-------------\n\n아이언맨 \n캡틴아메리카 \n토르 \n닥터 스트레인지\n</code></pre>\n<ul>\n<li>map</li>\n</ul>\n<pre><code class=\"language-javascript\">const items = [{ id: 1, text: \"hello\" }, { id: 2, text: \"bye\" }];\n\nconst texts = items.map(item => item.text);\nconsole.log(texts);\n\n-------------CONSOLE-------------\n\n[\"hello\", \"bye\"]\n</code></pre>\n<ul>\n<li>filter</li>\n</ul>\n<pre><code class=\"language-javascript\">const todos = [\n  {\n    id: 1,\n    text: \"java 입문\",\n    done: true\n  },\n  {\n    id: 2,\n    text: \"함수배우기\",\n    done: true\n  },\n  {\n    id: 3,\n    text: \"배열 내장 함수\",\n    done: false\n  }\n];\n\nconst taskNotDone = todos.filter(todo => todo.done === false);\n\n// todos.filter(todo => !todo.done); 와도 같은 의미 이다.\n\nconsole.log(taskNotDone);\n\n----------------CONSOLE-----------------\n\n[Object]\n    0: Object\n        id: 3\n        text: \"배열 내장 함수\"\n        done: false\n</code></pre>\n<ul>\n<li>splice</li>\n</ul>\n<p>배열에서 특정 항목을 지울 때 사용</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\nconst idx = num.indexOf(30);\nconst spliced = num.splice(idx, 2);\n\nconsole.log(\"spliced\", spliced);\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nspliced \n[30, 40]\nnum \n[10, 20]\n</code></pre>\n<ul>\n<li>slice</li>\n</ul>\n<p>배열에서 특정 항목을 지울 때 사용. 단 기존 배열의 구조를 건드리지 않음</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\n\nconst sliced = num.slice(0, 2);\n\nconsole.log(\"sliced\", sliced);\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nsliced \n[10, 20]\nnum \n[10, 20, 30, 40]\n</code></pre>\n<ul>\n<li>shift</li>\n</ul>\n<p>첫번째 원소를 배열에서 추출해준다. 기존 배열을 변경 시키며 반복 될 때마다 하나씩 제거된다.</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\n\nconst value = num.shift();\n\nconsole.log(\"value\", value);\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nvalue \n10\nnum \n[20, 30, 40]\n</code></pre>\n<ul>\n<li>pop</li>\n</ul>\n<p>마지막 원소를 배열에서 추출해준다. 기존의 배열을 변경 시키며 반복 될 때마다 하나씩 제거된다.</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\n\nconst value = num.pop();\n\nconsole.log(\"value\", value);\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nvalue \n40\nnum \n[10, 20, 30]\n</code></pre>\n<ul>\n<li>unshift</li>\n</ul>\n<p>배열의 첫번째 위치에 지정한 원소를 추가한다.</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\n\nconst value = num.unshift(5);\n\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nnum \n[5, 10, 20, 30, 40]\n</code></pre>\n<ul>\n<li>push</li>\n</ul>\n<p>배열의 마지막 위치에 지정한 원소를 추가한다.</p>\n<pre><code class=\"language-javascript\">const num = [10, 20, 30, 40];\n\nconst value = num.push(50);\n\nconsole.log(\"num\", num);\n\n----------------CONSOLE-----------------\n\nnum \n[10, 20, 30, 40, 50]\n</code></pre>\n<ul>\n<li>concat</li>\n</ul>\n<p>배열 합. 기존의 배열을 건드리지 않음</p>\n<pre><code class=\"language-javascript\">const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst concated = arr1.concat(arr2);\n\n// const concated = [...arr1, ...arr2];\nconsole.log(concated);\n\n----------------CONSOLE-----------------\n\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n<ul>\n<li>reduce</li>\n</ul>\n<pre><code class=\"language-javascript\">const numbers = [1, 2, 3, 4, 5];\n\nconst sum = numbers.reduce((accumulator, current) => accumulator + current, 0);\nconsole.log(sum);\n\n// accumulator = 누적값\n// 0 => 초기값\n\nconst avg = numbers.reduce((accumulator, current, index, array) => {\n  if (index === array.length - 1) {\n    return (accumulator + current) / array.length;\n  }\n  return accumulator + current;\n}, 0);\nconsole.log(avg);\n\n// array = reduce 함수 실행 대상 자신\n\n----------------CONSOLE-----------------\n\n5\n3\n</code></pre>\n<p>reduce 함수는 숫자가 아니더라도 배열을 컨트롤 함에 있어 사용이 많은 유용한 함수이므로 잘 알아 두는 것이 좋다.</p>\n<pre><code class=\"language-javascript\">const alphabets = [\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"e\"];\n\nconst counts = alphabets.reduce((acc, cur) => {\n  if (acc[cur]) {\n    acc[cur] += 1;\n  } else {\n    acc[cur] = 1;\n  }\n  return acc;\n}, {});\n\nconsole.log(counts);\n\n----------------CONSOLE-----------------\n\nObject {a: 3, b: 2, c: 2, d: 1, e: 1}\na: 3\nb: 2\nc: 2\nd: 1\ne: 1\n</code></pre>","frontmatter":{"type":"post","title":"Javascript ES6 기본","postUrl":"/post/2020-06-22-javascript-basic","tag":["javascript","자바스크립트","ES6"],"date":"2020-06-22","desc":"ECMAScript5는 2009년 12월에 등장하였다. ECMAScript2019가 나와있는 현재 아직도 많은 프로젝트에서는 ES5로 코딩이 되고 있다. 나 또한 ES6 문법은 생소하지만 이에 대한 학습의 필요성을 느끼고 Front-end 개발자로서 기초를 다진다는 생각으로 접근하려 한다."}}},"pageContext":{}},"staticQueryHashes":[]}