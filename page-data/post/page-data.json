{"componentChunkName":"component---src-templates-post-list-template-tsx","path":"/post","result":{"data":{"site":{"siteMetadata":{"title":"2P Enginnering Blog","author":"@2Paradise"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/javascript/2020-09-14-What -is-JavaScript/"},"frontmatter":{"type":"post","title":"What is JavaScript?","tag":["JavaScript","자바스크립트","ES6"],"date":"2020-09-14","desc":"웹에서 사용자가 행하는 행동을 제어할 수 있는 객체 기반의 Dynamic Cumputer Programming Language. 라고 정의 할 수 있다. Client-Side Javascript는 JavaScript가 사용 되는 가장 일반적인 형태이며 브라우저가 해석하기 위해 HTML에 포함되거나 참조된다. 정적 HTML에 사용자와 상호작용하고, 브라우저를 제어하고 동적으로 HTML 콘텐츠를 만드는 프로그램을 작성 할 수 있게 해준다."}}},{"node":{"fields":{"slug":"/typescript/2020-08-17-TypeScript-Redux-Middleware/"},"frontmatter":{"type":"post","title":"TypeScript & Redux Middleware","tag":["Typescript","React","Redux","Redux Middleware"],"date":"2020-08-17","desc":"quicktype 사이트를 이용하여 json data의 typescript interface 를 쉽게 얻을 수 있다. typescript가 적용 된 redux-middleware 작성 예제에 대해 살펴보고 사용방법에 대한 이해를 높이자."}}},{"node":{"fields":{"slug":"/typescript/2020-08-03-TypeScript-Redux/"},"frontmatter":{"type":"post","title":"TypeScript & Redux","tag":["Typescript","React","Redux"],"date":"2020-08-03","desc":"기존에 학습 했던 redux를 사용한 TodoList 작성 코드를 참고하여 Typescript를 이용한 react - redux 코드는 위의 링크 또는 개인 프로젝트 학습 소스를 참고 한다."}}},{"node":{"fields":{"slug":"/typescript/2020-08-01-TypeScript-for-React-Project/"},"frontmatter":{"type":"post","title":"TypeScript for React Project","tag":["Typescript","React","Reducer","ContextAPI"],"date":"2020-08-01","desc":"typescript 를 접하면서 생소 했던 부분들은 집고 넘어가자. 클래스 또는 객체를 지정할 때 사용 되는 문법이다. age`?` 로 표기한 것은 해당 값이 있을 수도 있고 없을 수도 있다는 의미를 나타낸다. type alias를 이용하여 같은 작업을 할 수도 있다."}}},{"node":{"fields":{"slug":"/react/2020-07-25-react-component-styling/"},"frontmatter":{"type":"post","title":"React 컴포넌트 스타일링","tag":["React","CSS","Styled-Components","SASS"],"date":"2020-07-25","desc":"CSS pre-processor 로서, 복잡한 작업을 쉽게 할 수 있게 해주고, 코드의 재활용성을 높여줄 뿐 만 아니라, 코드의 가독성을 높여 주어 유지보수를 쉽게 해준다."}}},{"node":{"fields":{"slug":"/react/2020-07-23-react-redux-middleware/"},"frontmatter":{"type":"post","title":"Redux Middleware","tag":["React","Redux","Redux Middleware"],"date":"2020-07-23","desc":"리덕스가 지닌 핵심 기능으로 context API, mobx 와 차별화 되는 강력한 기능이다. redux를 사용하는데 middleware를 사용하지 않으면 차라리 context API 나 useReducer를 사용하는게 나을 수도 있다. 미들웨어를 액션과 리듀서 사이의 중간자로 이해해도 좋다."}}},{"node":{"fields":{"slug":"/react/2020-07-22-react-connect-hoc/"},"frontmatter":{"type":"post","title":"Connect HOC 함수를 통해 Class형 component Redux 연동","tag":["React","HOC","Conncet HOC","Redux"],"date":"2020-07-22","desc":"최근 Reat 버전에서는 connect HOC를 쓸 일이 거의 없다. useSelector 와 useDispatch 사용이 우선되어야 한다. 예전에 만들어진 프로젝트의 클래스형 컴포넌트라던지 함수형 컴포넌트로는 구현할 수 없는 component deep catch lifeCycle 메소드를 쓴다면 Connect 라는 함수를 사용한다. component의 props를 통해 리덕스의 상태 또는 액션을 디스패치 하는 함수를 받아 올 수 있다. 예전에는 connect 함수 사용이 메인이었지만, useSelector와 useDispatch 가 등장하면서 사용되지 않는다."}}},{"node":{"fields":{"slug":"/react/2020-07-21-react-redux-keyword/"},"frontmatter":{"type":"post","title":"Redux 에서 사용되는 키워드 숙지하기","tag":["React","Redux"],"date":"2020-07-21","desc":"키워드들 중 대부분 useReducer를 사용할 때 한번쯤 접해본 것들이다. 상태의 변화가 필요하게 될 때 action이 발생한다. 이는 하나의 객체로 표현이 된다. type 값은 필수로 있어야 하며, 다른 값들은 임의로 정의 할 수 있다. 업데이트를 할 때 어떻게 업데이트를 할지 정의하는 함수라고 할 수 있다."}}},{"node":{"fields":{"slug":"/react/2020-07-20-Redux/"},"frontmatter":{"type":"post","title":"React Redux","tag":["React","Redux"],"date":"2020-07-20","desc":"리액트 생태계에서 가장 사용률이 높은 상태관리 라이브러리이다. 관련 로직을 다른 파일로 분리하여 관리하여 글로벌 상태관리도 손쉽게 할 수 있다. context api를 사용하여도 무관하며 그 흐름도 유사하다. context api 가 불편했던 시절 redux를 사용하 것이 당연시 여겨졌었다. redux는 react 에서 사용되기 위해 사용된 라이브러리 지만 다른 프레임 워크에서 사용되기도 한다. 많이 사용된다고 해서 redux가 무조건 필요한 것은 아니다. 하지만 프로젝트 생산성에 큰 도움을 줄 수 있다는 것은 확실 하다."}}},{"node":{"fields":{"slug":"/react/2020-07-12-react-router/"},"frontmatter":{"type":"post","title":"React Router","tag":["React","Router","SPA"],"date":"2020-07-12","desc":"라우팅을 클라이언트가 담당하게 된다. 라우팅은 어떤 주소에 어떤 UI를 보여줄지 정하는 것을 말한다. 보통은 서버에서 처리했지만 SPA에서는 클라이언트가 담당하게 된다.사용자가 특정 페이지에 이동을 할때 서버에 요청없이 페이지를 보여줄 수 있게 되는 것이다. 동적인 값이 필요할 때는 API 요청을 통해 Json 형식으로 보여주게 된다. 이러한 구조를 통해 얻을 수 있는 이점으로 서버는 자원을 많이 아낄 수 있고 클라이언트 쪽은 더 좋은 사용자 경험을 제공 받을 수 있는 것이다."}}},{"node":{"fields":{"slug":"/react/2020-07-11-react-contenxt-async/"},"frontmatter":{"type":"post","title":"Context에서 비동기 작업 상태 관리하기","tag":["React","Context"],"date":"2020-07-11","desc":"특정 컴포넌트에서 필요한 외부데이터는 컴포넌트 내부에서 useAsync 같은 hook을 사용하면 충분하지만 특정 데이터가 다양한 컴포넌트에서 필요한 경우가 있다. 예를 들어 로그인 상태같은 경우 이다."}}},{"node":{"fields":{"slug":"/react/2020-07-05-react-api/"},"frontmatter":{"type":"post","title":"React API 연동","tag":["React","API","axios"],"date":"2020-07-05","desc":"axios는 REST 기반 API를 요청 할 때 promise 기반으로 처리 할 수 있게 해주는 라이브러리이다. API 요청의 기본적인 방법은 useState 와 useEffect로 데이터를 로딩하는 방법이다. API를 요청 할때는 아래의 3가지 상태를 관리해야 한다."}}},{"node":{"fields":{"slug":"/react/2020-07-03-react-class-component/"},"frontmatter":{"type":"post","title":"Class 형 컴포넌트","tag":["React","Class Component"],"date":"2020-07-03","desc":"요즘 잘 사용하지 않지만 알아 둘 필요가 있다. 함수형 컴포넌트와 Hook으로 못하는 작업이 한 두가지 정도가 있다. 예전엔 class 형으로 만들었지만 지금은 hook으로 상태관리가 가능하기 때문에 함수형 컴포넌트가 주로 사용되고 있다."}}},{"node":{"fields":{"slug":"/react/2020-07-02-react-Immer/"},"frontmatter":{"type":"post","title":"Immer를 이용한 불변성 지키기","tag":["React","Context API"],"date":"2020-07-02","desc":"immer 를 사용하면 불변성을 해치는 코드를 작성하여도 대신 불변성을 지켜준다. 기존의 SPRED 를 이용한 처리 로직을 `immer` lib를 사용하여 변경해 보았다. TOGGLE_USER와 같이 복잡해 보이는 로직의 경우 `immer` 사용이 좀 더 직관적으로 소스를 이해하는데 도움이 되지만 굳이 꼭 사용해야 하는 lib는 아니다."}}},{"node":{"fields":{"slug":"/react/2020-07-01-ReactContextAPI/"},"frontmatter":{"type":"post","title":"Context API를 통한 전역관리","tag":["React","Context API"],"date":"2020-07-01","desc":"지금 까지 배운 컴포넌트의 props를 전달 하기 위해선 컴포넌트의 DEPTH 가 깊어 질 수록 비효율 적으로 props를 컴포넌트 선언 시마다 전달하는 수고가 있었다. 이에 Context API를 통해 전역 값 관리 하는 방법을 알아 보자."}}},{"node":{"fields":{"slug":"/react/2020-06-30-Create-Custom-Hook/"},"frontmatter":{"type":"post","title":"Create Custom Hook","tag":["React","Custom Hook","Hook"],"date":"2020-06-30","desc":"컴포넌트를 만들다 보면 반복되는 로직이 발생한다. input을 관리하는 꾀나 자주 작성하게되는 코드이다. 이런 경우 custom hook을 만들 수 있다. input 상태를 관리하는 hook을 만들어 보자. 아래는 useReducer 를 이용하여 만든 useInputs custom hook 이다."}}},{"node":{"fields":{"slug":"/Etc/2020-06-31-GatsbyJS-blog-for0Mac/"},"frontmatter":{"type":"post","title":"GatsbyJS 블로그 만들기 for Mac","tag":["Gatsby","React","GraphQL","ETC","Blog"],"date":"2020-06-30","desc":"윈도우 환경에서만 개발을 해왔던 초보 mac 유저에게는 모든게 낯설고 힘들다. React를 접하며 공부 목적의 Github Blog를 개설하기 위해 겪은 시행착오를 기준으로 주의할 점과 함께 포스팅 하려 한다. 기본적으로 GatsbyJs 는 React 기반의 정적 페이지 생성 프레임 워크로, 가공할 정보를 GraphQL에서 가져와 Bulid 시점에 정적 페이지를 만들어 내는 방식이다."}}},{"node":{"fields":{"slug":"/react/2020-06-29-useReducer-Hook/"},"frontmatter":{"type":"post","title":"React useReducer","tag":["React","useReducer","Hook"],"date":"2020-06-29","desc":"이전에는 컴포넌트의 상태를 업데이트를 할 때에 useState를 사용하여 설정해 주었는데 useReducer도 가능하다. 어떤 차이가 있는지 살펴본다면 useState에서는 설정할 다음 상태를 직접 지정해주는 형식인 반면에 useReducer는 액션 객체를 기반으로 업데이트를 한다. 액션 객체는 업데이트 할 때 참조하는 객체 인데, type 값을 통해 어떤 업데이트를 할지 설정하며 참조 값을 넣을 수도 있다."}}},{"node":{"fields":{"slug":"/react/2020-06-28-React-Hook/"},"frontmatter":{"type":"post","title":"React Hook","tag":["React","React Hook","Hook"],"date":"2020-06-28","desc":"react component 가 처음 화면에 나타날 때, 사라질 때 특정 작업을 할 수 있게 해주고. 추가적으로 component의 props 나 상태가 바뀌어 업데이트 되거나 업데이트 되기 전에 작업을 등록 할 수 도 있다. 위와 같이 useEffect 함수를 import 한 후 호출 할 때 첫번째 파라미터에는 Mount 시점에 처리할 로직을 구현 하며, return 함수(Cleaner Function)로 "}}},{"node":{"fields":{"slug":"/react/2020-06-27-react-jsx-basic/"},"frontmatter":{"type":"post","title":"React JSX 기본문법","tag":["React","jsx"],"date":"2020-06-27","desc":"React의 Html 렌더링을 위해 사용되는 JSX의 기본 문법에 대해 알아보자. html 과 비슷하지만 몇가지 규칙이 있다. 태그는 꼭 닫혀 있어야 한다. 두 개 이상의 엘리먼트는 하나의 엘리먼트로 감싸져야 한다."}}},{"node":{"fields":{"slug":"/javascript/2020-06-25-javascript-promise/"},"frontmatter":{"type":"post","title":"JavaScript 비동기 처리의 이해","tag":["JavaScript","자바스크립트","ES6","Promise"],"date":"2020-06-25","desc":"비동기 작업을 보다 편리하게 처리하도록 ES6에 도입 되었다. lib 형태로 있던 기능이 JavaScript로 이전된 경우이다. ... 콜백으로 비동기 처리 코드를 작성하지 않고 이러한 사고 방식를 벗어나 기본 코드 작성 방식으로 코드를 작성할 수 있도록 도와준다. 일반적으로 `await` 의 대상이 되는 비동기 처리 코드는 Axios 등 프로미스를 반환하는 API 호출 함수이다."}}},{"node":{"fields":{"slug":"/react/2020-06-24-React 기본개념/"},"frontmatter":{"type":"post","title":"React 기본개념","tag":["React","JavaScript"],"date":"2020-06-24","desc":"요즘의 웹은 단순 웹페이지가 아닌 웹 app의 형태를 띄고 있는 경우가 많기 때문에 귀찮은 돔, 상태값 업데이트 관리를 최소한으로 하고 오직 기능 개발, 사용자 인터페이스를 구현하는데 집중할 수 있도록 수많은 라이브러리들, 프레임워크들이 만들어졌다. 그 중 3대장을 꼽자면 `Angular`  `Vue`  `React` 를 꼽을 수 있다. 때문에 각각 기초 수준이라 하더라도 한번 쯤 사용해 보는 것을 권장하며, 각 도구들의 철학과 추구하는 방향이 다르다는 것을 아는 것이 중요하다. "}}},{"node":{"fields":{"slug":"/javascript/2020-06-24-javascript-util-doc/"},"frontmatter":{"type":"post","title":"JavaScript 알고 있으면 유용한 문법","tag":["JavaScript","자바스크립트","ES6"],"date":"2020-06-24","desc":"javascript 코드 작성에 있어서 알고 있으면 유요한 정보에 대해 알아보자. ES6 문법에 익숙해지도록 학습하며 아래에서 언급한 내용들을 숙지하여 적제적소의 로직에 사용함에 있어 불편함이 없도록 인지해두면 유용한 정보들이다."}}},{"node":{"fields":{"slug":"/javascript/2020-06-23-javascript-prototype/"},"frontmatter":{"type":"post","title":"JavaScript 프로토타입과 클래스","tag":["JavaScript","자바스크립트","ES6"],"date":"2020-06-23","desc":"자바 스크립트는 프로토타입 기반의 언어이다. 프로토타입이 자바스트립트 그 자체이기 때문에 집고 넘어갈 필요가 있다. 객체 생성자는 함수를 통해 새로운 객체를 만들고 그 안에 넣고 싶은 값 또는 함수를 구현할 수 있게 해준다. 대문자로 시작하며 new 선언으로 생성 할 수 있다."}}},{"node":{"fields":{"slug":"/javascript/2020-06-22-javascript-basic/"},"frontmatter":{"type":"post","title":"Javascript ES6 기본","tag":["JavaScript","자바스크립트","ES6"],"date":"2020-06-22","desc":"ECMAScript5는 2009년 12월에 등장하였다. ECMAScript2019가 나와있는 현재 아직도 많은 프로젝트에서는 ES5로 코딩이 되고 있다. 나 또한 ES6 문법은 생소하지만 이에 대한 학습의 필요성을 느끼고 Front-end 개발자로서 기초를 다진다는 생각으로 접근하려 한다."}}}]}},"pageContext":{}},"staticQueryHashes":["2274161303","405191750"]}