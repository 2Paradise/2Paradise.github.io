{"componentChunkName":"component---src-templates-post-template-tsx","path":"/react/2020-06-28-React-Hook/","result":{"data":{"site":{"siteMetadata":{"title":"2P Enginnering Blog","author":"@2Paradise"}},"post":{"fields":{"slug":"/react/2020-06-28-React-Hook/"},"frontmatter":{"title":"React Hook","hide":false,"type":"post","date":"2020-06-28","desc":"react component 가 처음 화면에 나타날 때, 사라질 때 특정 작업을 할 수 있게 해주고. 추가적으로 component의 props 나 상태가 바뀌어 업데이트 되거나 업데이트 되기 전에 작업을 등록 할 수 도 있다. 위와 같이 useEffect 함수를 import 한 후 호출 할 때 첫번째 파라미터에는 Mount 시점에 처리할 로직을 구현 하며, return 함수(Cleaner Function)로 ","tag":["React","React Hook","Hook"]},"html":"<h1>React Hook</h1>\n<h2>useState</h2>\n<h2>useRef</h2>\n<h2>useEffect</h2>\n<p>react component 가 처음 화면에 나타날 때, 사라질 때 특정 작업을 할 수 있게 해주고. 추가적으로 component의 props 나 상태가 바뀌어 업데이트 되거나 업데이트 되기 전에 작업을 등록 할 수 도 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useEffect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> active<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unmount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위와 같이 <code class=\"language-text\">useEffect</code> 함수를 import 한 후 호출 할 때 첫번째 파라미터에는 <code class=\"language-text\">Mount</code> 시점에 처리할 로직을 구현 하며, return 함수(Cleaner Function)로 <code class=\"language-text\">Unmount</code> 시점에 처리할 로직을 구현한다. 두번째 파라미터는 의존되는 배열 값 deps를 입력 한다. </p>\n<p>일반 적으로 <code class=\"language-text\">Mount</code> 시점은 DOM이 렌더링 된 이 후이며, 처리할 로직은</p>\n<ul>\n<li>props값을 state로 설정할 경우</li>\n<li>REST API 요청할 경우</li>\n<li>외부라이브러리를 호출할 경우</li>\n<li>setInterval, setTimeout</li>\n</ul>\n<p><code class=\"language-text\">Unmount</code> 시점의 로직은</p>\n<ul>\n<li>clearInterval, clearTimeout</li>\n<li>외부 라이브러리 인스턴스 제거</li>\n</ul>\n<p>만약 DEPS 배열에 값을 설정할 경우 useEffect 의 첫번째 파라미터 함수는 dept 배열의 값이 update 된 배열 값을 핸들링 할 수 있고, 클리너 함수에서는 deps 배열 값이 바뀌기 전의 값을 핸들링 할 수 있게 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deps 바뀐 배열 값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deps 바뀐 배열 값'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>핸들링 할 값이 있다면 DEPS에 설정을 해주어야 최신의 값을 유지 할 수 있게 된다. </p>\n<p>만약 두번째 파라미터인 DEPS 영역을 입력하지 않은 경우 컴포넌트가 리렌더링이 된 후 호출 되며 변경이 발생할 경우 관련된 모든 DOM 이 리렌더링 되게 된다. 따라서 성능 최적화를 위해선 deps를 설정 해 주는 것이 좋다. </p>\n<blockquote>\n<p>React 최적화를 위한 Hook</p>\n</blockquote>\n<h2>useMemo</h2>\n<p>이전에 연산된 값을 재사용할 때 사용되며 성능 최적화에 많이 사용된다. </p>\n<p>다음과 같은 function 이 있을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">countActiveUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'활성 사용자 수를 세는중 ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// const count = countActiveUser(users);</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">countActiveUser</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">활성 사용자 수 : </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>주석과 같이 단순히 function만 호출하여 count를 계산 할 경우 users 값이 변할 때 뿐 아니라, input의 key event 에도 function이 호출 되는 것을 확인 할 수 있다. 특정 조건에서만 작동 할 수 있도록 useMemo Hook을 활용하여 첫번째 파라미터는 작동 로직을 함수 형태 파라미터로 전달하고, 두번째 파라미터는 DEPS 배열을 지정하여 DEPS 배열에 해당하는 값이 변경될 때만 function을 실행 하도록 지정 할 수 있다. </p>\n<h2>useCallback</h2>\n<p>이전에 만들었던 함수를 재사용하는 방법을 알아보자. useMemo와 비슷하지만 함수를 위한 Hook이다. 함수를 새로 생성은 한다고 해서 부하가 많이 걸리지 않지만 한번 생성한 함수는 재사용하는 것이 좋다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> onRemove <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setUsers</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위와 같이 onRemove 함수를 useCallback으로 감싸고 deps에는 useCallback 내부에서 사용 하는 값을 넣어준다면 users의 값이 변경 될 때 해당 함수를 재사용하게 된다. </p>\n<h2>React.memo</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>CreateUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>컴포넌트를 React.memo 로 감싸 export 해주며 해당 컴포넌트와 관련된 함수에서 사용되는 공통된 배열은 setUsers의 첫번째 함수형 파라미터로 변경하고 DEPS 에서 제거해 주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> onRemove <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","id":"9d439b37-2321-5c60-aeed-509526edfce5"}},"pageContext":{}},"staticQueryHashes":["2274161303","405191750"]}