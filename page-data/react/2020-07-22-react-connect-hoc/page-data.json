{"componentChunkName":"component---src-templates-post-template-tsx","path":"/react/2020-07-22-react-connect-hoc/","result":{"data":{"site":{"siteMetadata":{"title":"2P Enginnering Blog","author":"@2Paradise"}},"post":{"fields":{"slug":"/react/2020-07-22-react-connect-hoc/"},"frontmatter":{"title":"Connect HOC 함수를 통해 Class형 component Redux 연동","hide":false,"type":"post","date":"2020-07-22","desc":"최근 Reat 버전에서는 connect HOC를 쓸 일이 거의 없다. useSelector 와 useDispatch 사용이 우선되어야 한다. 예전에 만들어진 프로젝트의 클래스형 컴포넌트라던지 함수형 컴포넌트로는 구현할 수 없는 component deep catch lifeCycle 메소드를 쓴다면 Connect 라는 함수를 사용한다. component의 props를 통해 리덕스의 상태 또는 액션을 디스패치 하는 함수를 받아 올 수 있다. 예전에는 connect 함수 사용이 메인이었지만, useSelector와 useDispatch 가 등장하면서 사용되지 않는다.","tag":["React","HOC","Conncet HOC","Redux"]},"html":"<p>최근 Reat 버전에서는 connect HOC를 쓸 일이 거의 없다. useSelector 와 useDispatch 사용이 우선되어야 한다. 예전에 만들어진 프로젝트의 클래스형 컴포넌트라던지 함수형 컴포넌트로는 구현할 수 없는 component deep catch lifeCycle 메소드를 쓴다면 Connect 라는 함수를 사용한다. </p>\n<p> component의 props를 통해 리덕스의 상태 또는 액션을 디스패치 하는 함수를 받아 올 수 있다. 예전에는 connect 함수 사용이 메인이었지만, useSelector와 useDispatch 가 등장하면서 사용되지 않는다. </p>\n<h2>HOC ?</h2>\n<p>재사용 되는 값, 함수를 props로 받아 올 수 있게 해주는 옛날 패턴이다. 현재는 Hook으로 대체된 것이다. </p>\n<p> Connect를 꼭 클래스형 컴포넌트에서 쓸 필요는 없다. 함수형이던 클래스형이던 사용방법이 다르진 않다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>bindActionCreators<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Counter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>connect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>decrease<span class=\"token punctuation\">,</span> increase<span class=\"token punctuation\">,</span> setDiff<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../modules/counter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CounterContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n    number<span class=\"token punctuation\">,</span>\n    diff<span class=\"token punctuation\">,</span>\n    increase<span class=\"token punctuation\">,</span>\n    decrease<span class=\"token punctuation\">,</span>\n    setDiff\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Counter number<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span> diff<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>diff<span class=\"token punctuation\">}</span> onIncrease<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increase<span class=\"token punctuation\">}</span> onDecrease<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>decrease<span class=\"token punctuation\">}</span> onSetDiff<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setDiff<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n    diff <span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span>diff\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// const mapDispatchToProps = dispatch => ({</span>\n<span class=\"token comment\">//     onIncrease: () => dispatch(increase()),</span>\n<span class=\"token comment\">//     onDecrease: () => dispatch(decrease()),</span>\n<span class=\"token comment\">//     onSetDiff: (diff) => dispatch(setDiff(diff)),</span>\n<span class=\"token comment\">// });</span>\n\n<span class=\"token comment\">// const mapDispatchToProps = dispatch => bindActionCreators({</span>\n<span class=\"token comment\">//     increase,</span>\n<span class=\"token comment\">//     decrease,</span>\n<span class=\"token comment\">//     setDiff</span>\n<span class=\"token comment\">// }, dispatch);</span>\n\n<span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    increase<span class=\"token punctuation\">,</span>\n    decrease<span class=\"token punctuation\">,</span>\n    setDiff\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CounterContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Connect 에서 알아두면 좋은 것들</h1>\n<h2>1. mapStateToProps의 두번째 파라미터로 ownProps를 사용</h2>\n<p> 이 파라미터는 생략이 가능하여 보통은 넣지 않는다. 컨테이너 컴포넌트를 랜더링 할 때 직접 넣어주는 props를 말한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\ttodo<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">[</span>ownProps<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Container id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> 리덕스안의 특정 값을 불러올 때 현재 props를 참고할 때 사용 가능 하다.</p>\n<h2>2. connect의 3번째 파라미터 mergeProps</h2>\n<p>하나의 함수인데 이를 통해 컴포넌트가 실제 전달 받는 props를 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">stateProps<span class=\"token punctuation\">,</span> dispatchProps<span class=\"token punctuation\">,</span> ownProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>3. connect 의 4번째 파라미터 options</h2>","id":"d22630c6-e88f-5959-96c8-43a363bc1c23"}},"pageContext":{}},"staticQueryHashes":["2274161303","405191750"]}