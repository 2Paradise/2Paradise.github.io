{"componentChunkName":"component---src-templates-post-template-tsx","path":"/react/2020-07-02-react-Immer/","result":{"data":{"site":{"siteMetadata":{"title":"2P Enginnering Blog","author":"@2Paradise"}},"post":{"fields":{"slug":"/react/2020-07-02-react-Immer/"},"frontmatter":{"title":"Immer를 이용한 불변성 지키기","hide":false,"type":"post","date":"2020-07-02","desc":"immer 를 사용하면 불변성을 해치는 코드를 작성하여도 대신 불변성을 지켜준다. 기존의 SPRED 를 이용한 처리 로직을 `immer` lib를 사용하여 변경해 보았다. TOGGLE_USER와 같이 복잡해 보이는 로직의 경우 `immer` 사용이 좀 더 직관적으로 소스를 이해하는데 도움이 되지만 굳이 꼭 사용해야 하는 lib는 아니다.","tag":["React","Context API"]},"html":"<p>immer 를 사용하면 불변성을 해치는 코드를 작성하여도 대신 불변성을 지켜준다. </p>\n<p>immer lib 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> immer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>사용할 js 에 import</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> produce <span class=\"token keyword\">from</span> <span class=\"token string\">'immer'</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'CREATE_USER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token parameter\">draft</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                draft<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return{</span>\n            <span class=\"token comment\">//     inputs : initialState,</span>\n            <span class=\"token comment\">//     users : state.users.concat(action.user)</span>\n            <span class=\"token comment\">// };</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'TOGGLE_USER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token parameter\">draft</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> draft<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> action<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                user<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return{</span>\n            <span class=\"token comment\">//     ...state,</span>\n            <span class=\"token comment\">//     users : state.users.map(user => user.id === action.id ? {...user, active : !user.active} : user)</span>\n            <span class=\"token comment\">// };</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'REMOVE_USER'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token parameter\">draft</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> draft<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span>action<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                draft<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return{</span>\n            <span class=\"token comment\">//     ...state,</span>\n            <span class=\"token comment\">//     users : state.users.filter(user => user.id !== action.id)</span>\n            <span class=\"token comment\">// };</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unhandeled action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>기존의 SPRED 를 이용한 처리 로직을 <code class=\"language-text\">immer</code> lib를 사용하여 변경해 보았다. TOGGLE_USER와 같이 복잡해 보이는 로직의 경우 <code class=\"language-text\">immer</code> 사용이 좀 더 직관적으로 소스를 이해하는데 도움이 되지만 굳이 꼭 사용해야 하는 lib는 아니다.</p>","id":"f9a592b2-9963-5876-9cdb-097f33ea4623"}},"pageContext":{}},"staticQueryHashes":["2274161303","405191750"]}